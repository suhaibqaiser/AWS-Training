{"version":3,"sources":["../src/app.js"],"names":["os","require","WebSocket","http","url","port","server","createServer","ws","Server","noServer","on","upgrade","request","socket","head","pathname","parse","handleUpgrade","done","wsws","emit","isAlive","console","log","heartbeat","close","clearInterval","interval","incoming","message","send","Date","hostname","write","destroy","noop","setInterval","ping","clients","forEach","each","terminate","listen"],"mappings":"AAAA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,IAAD,CAAzB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB,C,CAEA;;;AACA,MAAMI,IAAI,GAAG,IAAb,C,CAEA;;AACA,MAAMC,MAAM,GAAGH,IAAI,CAACI,YAAL,EAAf;AACA,MAAMC,EAAE,GAAG,IAAIN,SAAS,CAACO,MAAd,CAAqB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAArB,CAAX,C,CAEA;;AACAJ,MAAM,CAACK,EAAP,CAAU,SAAV,EAAqB,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACzD,QAAMC,QAAQ,GAAGZ,GAAG,CAACa,KAAJ,CAAUJ,OAAO,CAACT,GAAlB,EAAuBY,QAAxC;;AAEA,MAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACvBR,IAAAA,EAAE,CAACU,aAAH,CAAiBL,OAAjB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC,SAASI,IAAT,CAAcC,IAAd,EAAoB;AACxDZ,MAAAA,EAAE,CAACa,IAAH,CAAQ,YAAR,EAAsBD,IAAtB,EAA4BP,OAA5B;AACAO,MAAAA,IAAI,CAACE,OAAL,GAAe,IAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAJ,MAAAA,IAAI,CAACT,EAAL,CAAQ,MAAR,EAAgBc,SAAhB;AAEAL,MAAAA,IAAI,CAACT,EAAL,CAAQ,OAAR,EAAiB,SAASe,KAAT,GAAiB;AAC9BH,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAG,QAAAA,aAAa,CAACC,QAAD,CAAb;AACH,OAHD;AAKAR,MAAAA,IAAI,CAACT,EAAL,CAAQ,SAAR,EAAmB,SAASkB,QAAT,CAAkBC,OAAlB,EAA2B;AAC1CP,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCM,OAAjC;AACAV,QAAAA,IAAI,CAACW,IAAL,CAAUC,IAAI,KAAK,yBAAT,GAAqChC,EAAE,CAACiC,QAAxC,GAAmD,IAAnD,GAA0DH,OAApE;AACH,OAHD;AAIH,KAfD;AAgBH,GAjBD,MAiBO;AACHhB,IAAAA,MAAM,CAACoB,KAAP,CAAa,mCAAb;AACApB,IAAAA,MAAM,CAACqB,OAAP;AACH;;AAED,WAASV,SAAT,GAAqB;AACjB,SAAKH,OAAL,GAAe,IAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH;;AAED,WAASY,IAAT,GAAgB,CAEf;;AACD,QAAMR,QAAQ,GAAGS,WAAW,CAAC,SAASC,IAAT,GAAgB;AACzC9B,IAAAA,EAAE,CAAC+B,OAAH,CAAWC,OAAX,CAAmB,SAASC,IAAT,CAAcrB,IAAd,EAAoB;AACnC,UAAIA,IAAI,CAACE,OAAL,KAAiB,KAArB,EAA4B;AACxB,eAAOF,IAAI,CAACsB,SAAL,EAAP;AACH,OAFD,MAEO;AACHtB,QAAAA,IAAI,CAACE,OAAL,GAAe,KAAf;AACAF,QAAAA,IAAI,CAACkB,IAAL,CAAUF,IAAV;AACH;AACJ,KAPD;AAQH,GAT2B,EASzB,KATyB,CAA5B;AAWH,CA5CD;AA6CA9B,MAAM,CAACqC,MAAP,CAActC,IAAd;AACAkB,OAAO,CAACC,GAAR,CAAY,wCAAwCnB,IAApD","sourcesContent":["// requires for libraries\nconst os = require(\"os\");\nconst WebSocket = require('ws');\nconst http = require('http');\nconst url = require('url');\n\n// application constants\nconst port = 6380;\n\n// application initialization\nconst server = http.createServer();\nconst ws = new WebSocket.Server({ noServer: true });\n\n// request router\nserver.on('upgrade', function upgrade(request, socket, head) {\n    const pathname = url.parse(request.url).pathname;\n\n    if (pathname === '/comms') {\n        ws.handleUpgrade(request, socket, head, function done(wsws) {\n            ws.emit('connection', wsws, request);\n            wsws.isAlive = true;\n            console.log('Client connected ');\n            wsws.on('pong', heartbeat)\n\n            wsws.on('close', function close() {\n                console.log('Client disconnected!');\n                clearInterval(interval);\n            });\n\n            wsws.on('message', function incoming(message) {\n                console.log('Received Message:', message);\n                wsws.send(Date() + ' | Message received at ' + os.hostname + ': ' + message);\n            });\n        });\n    } else {\n        socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n        socket.destroy();\n    }\n\n    function heartbeat() {\n        this.isAlive = true;\n        console.log('Client online...');\n    }\n\n    function noop() {\n\n    }\n    const interval = setInterval(function ping() {\n        ws.clients.forEach(function each(wsws) {\n            if (wsws.isAlive === false) {\n                return wsws.terminate();\n            } else {\n                wsws.isAlive = false;\n                wsws.ping(noop);\n            }\n        });\n    }, 30000);\n\n});\nserver.listen(port);\nconsole.log('Websocket server started on port : ' + port);"],"file":"app.js"}