{"version":3,"sources":["../src/app.js"],"names":["os","require","WebSocket","http","url","axios","v4","uuidv4","randomInt","port","apiServer","server","createServer","ws","Server","noServer","on","upgrade","request","socket","head","pathname","parse","handleUpgrade","done","wsws","emit","isAlive","console","log","put","clientName","clientIp","remoteAddress","clientHostname","clientDeviceId","clientIsAlive","then","res","status","clientId","data","client","_id","catch","error","heartbeat","post","close","clearInterval","interval","String","incoming","message","send","Date","hostname","write","destroy","noop","setInterval","ping","clients","forEach","each","terminate","listen"],"mappings":"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","sourcesContent":["// requires for libraries\nconst os = require(\"os\");\nconst WebSocket = require('ws');\nconst http = require('http');\nconst url = require('url');\nconst axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\nconst { randomInt } = require(\"crypto\");\n\n// application constants\nconst port = 6380;\nconst apiServer = 'http://localhost:3000/client/'\n\n// application initialization\nconst server = http.createServer();\nconst ws = new WebSocket.Server({ noServer: true });\n\n\n// request router\nserver.on('upgrade', function upgrade(request, socket, head) {\n    const pathname = url.parse(request.url).pathname;\n\n    if (pathname === '/comms') {\n        ws.handleUpgrade(request, socket, head, function done(wsws) {\n            ws.emit('connection', wsws, request);\n\n            wsws.isAlive = true;\n            console.log('Client connected ');\n            axios\n                .put(apiServer + 'register', {\n                    clientName: randomInt(99999),\n                    clientIp: request.socket.remoteAddress,\n                    clientHostname: uuidv4(),\n                    clientDeviceId: uuidv4(),\n                    clientIsAlive: true\n                }).then(res => {\n                    console.log('statusCode :' + res.status)\n                    //console.log(res.data.client)\n                    wsws.clientId = res.data.client._id;\n                    wsws.clientName = res.data.client.clientName;\n                    wsws.clientIp = res.data.client.clientIp;\n                    wsws.clientHostname = res.data.client.clientHostname;\n                    wsws.clientDeviceId = res.data.client.clientDeviceId;\n                }).catch(error => {\n                    console.error(error)\n                })\n            wsws.on('pong', function heartbeat() {\n                this.isAlive = true;\n                axios\n                    .post(apiServer + 'alive', {\n                        clientId: wsws.clientId\n                    }).then(res => {\n                        console.log('statusCode :' + res.status)\n                        //console.log(res.data)\n                    }).catch(error => {\n                        console.error(error)\n                    })\n                console.log('Client online...');\n            });\n\n            wsws.on('close', function close() {\n                console.log('Client disconnected!');\n                axios\n                    .post(apiServer + 'update', {\n                        clientId: wsws.clientId,\n                        clientName: wsws.clientName,\n                        clientIp: wsws.clientIp,\n                        clientHostname: wsws.clientHostname,\n                        clientDeviceId: wsws.clientDeviceId,\n                        clientIsAlive: false\n                    }).then(res => {\n                        console.log('statusCode :' + res.status)\n                        //console.log(res.data)\n                    }).catch(error => {\n                        console.error(error)\n                    })\n                clearInterval(interval);\n            }); String\n\n            wsws.on('message', function incoming(message) {\n                console.log('Received Message:', message);\n                wsws.send(Date() + ' | Message received at ' + os.hostname + ': ' + message);\n            });\n        });\n    } else {\n        socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n        socket.destroy();\n    }\n\n    function noop() {\n\n    }\n    const interval = setInterval(function ping() {\n        ws.clients.forEach(function each(wsws) {\n            if (wsws.isAlive === false) {\n                return wsws.terminate();\n            } else {\n                wsws.isAlive = false;\n                wsws.ping(noop);\n            }\n        });\n    }, 30000);\n\n});\nserver.listen(port);\nconsole.log('Websocket server started on port : ' + port);"],"file":"app.js"}